(define (square-list1 items)
  (define (iter things answer)
    (if (null? things)
        answer
        (iter (cdr things)
              (cons (square (car things))
                    answer))))
  (iter items nil))

(display (square-list1 (list 1 2 3 4)))
(newline)

;the first time calling (iter (1 2 3) nil), it calls itself with
;(iter (2 3) (1)), and then (iter (3) (4 1)) it is obviously that the result
;will be reversed.

(define (square-list2 items)
  (define (iter things answer)
    (if (null? things)
        answer
        (iter (cdr things)
              (cons answer
                    (square (car things))))))
  (iter items nil))

(display (square-list2 (list 1 2 3 4)))
(newline)

;this version is obviously incorrect. the initial nil is consed with numbers,
;the resulting object is not a list.
