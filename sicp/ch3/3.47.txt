;part a
(define (make-semaphore size)
  (let ((mutex (make-mutex)))
    (define (the-semaphore m)
      (cond ((eq? m 'acquire)
             (mutex 'acquire)
             (if (> size 0)
                 (begin (set! size (- size 1))
                        (mutex 'release))
                 (begin (mutex'release)
                        (the-semaphore 'acquire))))
            ((eq? m 'release)
             (mutex 'acquire)
             (set! size (+ size 1))
             (mutex 'release))))
    the-semaphore))

;part b
(define (make-semaphore size)
  (let ((cell (list false)))
    (define (the-semaphore m)
      (cond ((eq? m 'acquire)
             (if (test-and-set! cell)
                 (the-semaphore 'acquire)
                 (if (> size 0)
                     (begin (set! size (- size 1))
                            (clear! cell))
                     (begin (clear! cell)
                            (the-semaphore 'acquire)))))
            ((eq? m 'release)
             (if (test-and-set! cell)
                 (the-semaphore 'release)
                 (begin (set! size (+ size 1))
                        (clear! cell))))))
    the-semaphore))
